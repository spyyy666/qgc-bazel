# Dockerfile.multi - unified multi-arch (amd64/arm64) build for QGroundControl
# Uses buildx automatic build args: TARGETPLATFORM, TARGETARCH, TARGETOS
# TARGETARCH values we handle: amd64, arm64

FROM ubuntu:24.04 AS build

ARG TARGETARCH
ENV TARGETARCH=${TARGETARCH}
ENV DEBIAN_FRONTEND=noninteractive TZ=Asia/Taipei

# Base tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common gnupg2 ca-certificates locales git curl wget \
    build-essential cmake ninja-build python3 python3-pip pipx && \
    rm -rf /var/lib/apt/lists/*

RUN sed -i 's/^# *\(en_US.UTF-8 UTF-8\)/\1/' /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

RUN add-apt-repository -y universe && apt-get update

# QGC deps (shared across arches)
RUN apt-get install -y --no-install-recommends \
    appstream binutils build-essential ccache cmake cppcheck file gdb git \
    libfuse2 fuse3 libtool mold ninja-build patchelf pipx pkgconf python3 python3-pip rsync wget zsync \
    libatspi2.0-dev libfontconfig1-dev libfreetype-dev libgtk-3-dev libsm-dev libx11-dev libx11-xcb-dev \
    libxcb-cursor-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev \
    libxcb-present-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-shape0-dev \
    libxcb-shm0-dev libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-xkb-dev \
    libxcb1-dev libxext-dev libxfixes-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libxrender-dev \
    libunwind-dev libgstreamer1.0-dev libgstreamer-plugins-bad1.0-dev libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev libgstreamer-gl1.0-0 gstreamer1.0-plugins-bad gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-rtp gstreamer1.0-gl \
    gstreamer1.0-libav gstreamer1.0-rtsp gstreamer1.0-x libusb-1.0-0-dev libvulkan-dev libpipewire-0.3-dev \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && if apt-cache show gstreamer1.0-qt6 >/dev/null 2>&1; then apt-get install -y --no-install-recommends gstreamer1.0-qt6; fi && rm -rf /var/lib/apt/lists/*

RUN pipx ensurepath
ENV PATH="/root/.local/bin:$PATH"

## Qt setup: use aqtinstall for amd64, system packages for arm64
ARG QT_VERSION=6.10.0
ARG QT_PATH=/opt/Qt
ARG QT_HOST=linux
ARG QT_TARGET=desktop
ARG QT_MODULES="qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors qtscxml"
RUN if [ "$TARGETARCH" = "amd64" ]; then \
            pipx install aqtinstall && \
            QT_ARCH=linux_gcc_64; QT_ARCH_DIR=gcc_64; \
            aqt install-qt ${QT_HOST} ${QT_TARGET} ${QT_VERSION} ${QT_ARCH} -O ${QT_PATH} -m ${QT_MODULES} && \
            ln -s ${QT_PATH}/${QT_VERSION}/${QT_ARCH_DIR} /opt/Qt/current || true && \
            echo "Qt arch: ${QT_ARCH} (${QT_ARCH_DIR}) for ${TARGETARCH}" > /qt-arch.txt; \
        elif [ "$TARGETARCH" = "arm64" ]; then \
            apt-get update && apt-get install -y --no-install-recommends \
                qt6-base-dev qt6-multimedia-dev qt6-quick3d-dev qt6-tools-dev qt6-declarative-dev \
                qt6-positioning-dev qt6-sensors-dev qt6-serialport-dev qt6-shadertools-dev qt6-connectivity-dev \
                qt6-charts-dev qt6-imageformats-dev qt6-location-dev qt6-scxml-dev qt6-speech-dev && \
            ln -s /usr/lib/aarch64-linux-gnu/qt6 /opt/Qt/current || true && \
            echo "Qt system packages for arm64 installed" > /qt-arch.txt; \
        else echo "Unsupported TARGETARCH=$TARGETARCH"; exit 1; fi

# Set Qt env for both arch
ENV QT_ROOT_PATH=/opt/Qt/current
ENV Qt6_DIR=${QT_ROOT_PATH}/cmake/Qt6 \
        CMAKE_PREFIX_PATH=${QT_ROOT_PATH}/cmake/Qt6:${QT_ROOT_PATH}:/usr/lib/aarch64-linux-gnu/cmake/Qt6:/usr/lib/aarch64-linux-gnu/qt6 \
        PATH=${QT_ROOT_PATH}/bin:${PATH} \
        LD_LIBRARY_PATH=${QT_ROOT_PATH}/lib:${LD_LIBRARY_PATH} \
        PKG_CONFIG_PATH=${QT_ROOT_PATH}/lib/pkgconfig \
        QT_PLUGIN_PATH=${QT_ROOT_PATH}/plugins \
        QML2_IMPORT_PATH=${QT_ROOT_PATH}/qml

# Bazelisk (dynamic arch)
ARG BAZELISK_VERSION=v1.20.0
ARG BAZELISK_SHA256=""
RUN if [ "$TARGETARCH" = "amd64" ]; then BZ_ARCH=amd64; elif [ "$TARGETARCH" = "arm64" ]; then BZ_ARCH=arm64; else echo "Unsupported TARGETARCH=$TARGETARCH"; exit 1; fi; \
    curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/${BAZELISK_VERSION}/bazelisk-linux-${BZ_ARCH} -o /usr/local/bin/bazel && \
    if [ -n "$BAZELISK_SHA256" ]; then echo "$BAZELISK_SHA256  /usr/local/bin/bazel" | sha256sum -c -; fi && \
    chmod +x /usr/local/bin/bazel && bazel version || true

RUN git config --global --add safe.directory /workspace
WORKDIR /workspace

RUN echo "=== Verify toolchain (${TARGETARCH}) ===" && gcc --version && bazel version && echo "=== OK ==="

# Copy sources
COPY BUILD.bazel.native /workspace/BUILD.bazel.native
COPY MODULE.bazel /workspace/MODULE.bazel
COPY . /workspace/

ARG QGC_SKIP_APPIMAGE=1
ENV QGC_SKIP_APPIMAGE=${QGC_SKIP_APPIMAGE}
RUN echo "=== Bazel Pre-Build (${TARGETARCH}) ===" && \
    cp BUILD.bazel.native BUILD.bazel || true && \
    if [ "$TARGETARCH" = "amd64" ]; then sed -i 's#//toolchains:aarch64_linux_gnu_toolchain##g' BUILD.bazel || true; fi && \
    if [ "${QGC_SKIP_APPIMAGE}" = "1" ]; then \
        echo '[Skip AppImage] bazel fetch //:qgroundcontrol_cmake'; \
        bazel fetch //:qgroundcontrol_cmake || true; \
        echo '[Skip AppImage] patch CreateAppImage.cmake (early return)'; \
        find /root/.cache/bazel -type f -path '*CreateAppImage.cmake' -exec sed -i '1i if(DEFINED ENV{QGC_SKIP_APPIMAGE} AND "$ENV{QGC_SKIP_APPIMAGE}" STREQUAL "1")\n  message(STATUS "[QGC] Skipping AppImage creation via ENV")\n  return()\nendif()' {} +; \
    fi && \
    bazel build //:qgroundcontrol_cmake --jobs=$(nproc) --verbose_failures || echo 'Build may have partially failed'

RUN mkdir -p /opt/qgc-dist && \
    REAL_BIN=$(find /root/.cache/bazel -path '*qgroundcontrol_cmake/bin/QGroundControl' -type f | head -1 || true) && \
    if [ -n "$REAL_BIN" ]; then \
        echo "Found binary: $REAL_BIN"; \
        cp "$REAL_BIN" /opt/qgc-dist/QGroundControl; \
        mkdir -p /opt/qgc-dist/plugins && cp -r $QT_PLUGIN_PATH/platforms /opt/qgc-dist/plugins/ 2>/dev/null || true; \
        cp -r $QT_PLUGIN_PATH/xcbglintegrations /opt/qgc-dist/plugins/ 2>/dev/null || true; \
    else \
        echo 'QGroundControl binary not found during build stage.'; \
    fi

FROM build AS runtime
RUN useradd -m -s /bin/bash user && chown -R user:user /workspace && chown -R user:user /opt/qgc-dist || true
USER user
WORKDIR /home/user
ENTRYPOINT ["/opt/qgc-dist/QGroundControl"]
