## Dockerfile.arm64 - Multi-stage ARM64 build mirroring amd64 flow
FROM ubuntu:24.04 AS build

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Taipei

RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    gnupg2 \
    ca-certificates \
    locales \
    git \
    curl \
    wget \
    build-essential \
    cmake \
    ninja-build \
    python3 \
    python3-pip \
    pipx \
    && rm -rf /var/lib/apt/lists/*

RUN sed -i 's/^# *\(en_US.UTF-8 UTF-8\)/\1/' /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

RUN add-apt-repository -y universe && apt-get update

RUN apt-get install -y --no-install-recommends \
    appstream \
    binutils \
    build-essential \
    ccache \
    cmake \
    cppcheck \
    file \
    gdb \
    git \
    libfuse2 \
    fuse3 \
    libtool \
    mold \
    ninja-build \
    patchelf \
    pipx \
    pkgconf \
    python3 \
    python3-pip \
    rsync \
    wget \
    zsync \
    libatspi2.0-dev \
    libfontconfig1-dev \
    libfreetype-dev \
    libgtk-3-dev \
    libsm-dev \
    libx11-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-present-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-render0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xinerama0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libunwind-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    libgstreamer-gl1.0-0 \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-plugins-rtp \
    gstreamer1.0-gl \
    gstreamer1.0-libav \
    gstreamer1.0-rtsp \
    gstreamer1.0-x \
    libusb-1.0-0-dev \
    libvulkan-dev \
    libpipewire-0.3-dev \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && if apt-cache show gstreamer1.0-qt6 >/dev/null 2>&1; then apt-get install -y --no-install-recommends gstreamer1.0-qt6; fi && rm -rf /var/lib/apt/lists/*

RUN pipx ensurepath
ENV PATH="/root/.local/bin:$PATH"

ENV QT_VERSION=6.10.0
ENV QT_PATH=/opt/Qt
ENV QT_HOST=linux
ENV QT_TARGET=desktop
ENV QT_ARCH=linux_arm64
ENV QT_ARCH_DIR=arm64
ENV QT_ROOT_DIR=${QT_PATH}/${QT_VERSION}/${QT_ARCH_DIR}
ENV QT_MODULES="qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors qtscxml"

RUN pipx install aqtinstall && aqt install-qt ${QT_HOST} ${QT_TARGET} ${QT_VERSION} ${QT_ARCH} -O ${QT_PATH} -m ${QT_MODULES}

ENV QT_ROOT_PATH=${QT_ROOT_DIR}
ENV Qt6_DIR=${QT_ROOT_PATH}/lib/cmake/Qt6
ENV PATH=${QT_ROOT_PATH}/bin:${PATH}
ENV LD_LIBRARY_PATH=${QT_ROOT_PATH}/lib
ENV PKG_CONFIG_PATH=${QT_ROOT_PATH}/lib/pkgconfig
ENV QT_PLUGIN_PATH=${QT_ROOT_PATH}/plugins
ENV QML2_IMPORT_PATH=${QT_ROOT_PATH}/qml

# Bazelisk ARM64
ARG BAZELISK_VERSION=v1.20.0
ENV BAZELISK_VERSION=${BAZELISK_VERSION}
ENV BAZELISK_URL="https://github.com/bazelbuild/bazelisk/releases/download/${BAZELISK_VERSION}/bazelisk-linux-arm64"
ARG BAZELISK_SHA256=""
RUN echo "Downloading Bazelisk ${BAZELISK_VERSION} (arm64)" && \
    curl -fSL "$BAZELISK_URL" -o /usr/local/bin/bazel && \
    if [ -n "$BAZELISK_SHA256" ]; then echo "$BAZELISK_SHA256  /usr/local/bin/bazel" | sha256sum -c -; fi && \
    chmod +x /usr/local/bin/bazel && bazel version || true

RUN git config --global --add safe.directory /workspace
WORKDIR /workspace

RUN echo "=== ARM64 環境驗證 ===" && gcc --version && bazel version && echo "=== 完成 ==="

COPY BUILD.bazel.native /workspace/BUILD.bazel.native
COPY MODULE.bazel /workspace/MODULE.bazel
COPY . /workspace/

USER root
WORKDIR /workspace

ARG QGC_SKIP_APPIMAGE=1
ENV QGC_SKIP_APPIMAGE=${QGC_SKIP_APPIMAGE}
RUN echo '=== Bazel Pre-Build (ARM64) ===' && \
    cp BUILD.bazel.native BUILD.bazel || true && \
    if [ "${QGC_SKIP_APPIMAGE}" = "1" ]; then \
      echo '[Skip AppImage] bazel fetch //:qgroundcontrol_cmake'; \
      bazel fetch //:qgroundcontrol_cmake || true; \
      echo '[Skip AppImage] patch CreateAppImage.cmake (early return)'; \
      find /root/.cache/bazel -type f -path '*CreateAppImage.cmake' -exec sed -i '1i if(DEFINED ENV{QGC_SKIP_APPIMAGE} AND "$ENV{QGC_SKIP_APPIMAGE}" STREQUAL "1")\n  message(STATUS "[QGC] Skipping AppImage creation via ENV")\n  return()\nendif()' {} +; \
    fi && \
    bazel build //:qgroundcontrol_cmake --jobs=$(nproc) --verbose_failures || echo 'Build may have partially failed'

RUN mkdir -p /opt/qgc-dist && \
    REAL_BIN=$(find /root/.cache/bazel -path '*qgroundcontrol_cmake/bin/QGroundControl' -type f | head -1 || true) && \
    if [ -n "$REAL_BIN" ]; then \
      echo "Found binary: $REAL_BIN"; \
      cp "$REAL_BIN" /opt/qgc-dist/QGroundControl; \
      mkdir -p /opt/qgc-dist/plugins && cp -r $QT_PLUGIN_PATH/platforms /opt/qgc-dist/plugins/ 2>/dev/null || true; \
      cp -r $QT_PLUGIN_PATH/xcbglintegrations /opt/qgc-dist/plugins/ 2>/dev/null || true; \
    else \
      echo 'QGroundControl binary not found during build stage.'; \
    fi

FROM build AS runtime
RUN useradd -m -s /bin/bash user && chown -R user:user /workspace && chown -R user:user /opt/qgc-dist || true
USER user
WORKDIR /home/user
ENTRYPOINT ["/opt/qgc-dist/QGroundControl"]